#include <iostream>
#include <fstream>
#include <sstream>
#include <chrono>
#include <bitset>
#include <math.h>

#include "AIGParser.h"

using namespace std;
using namespace AIGP;

string getDateTime() {
	time_t rawtime;
	struct tm * timeinfo;
	char buffer[80];

	time(&rawtime);
	timeinfo = localtime(&rawtime);

	strftime(buffer, 80, "%F %T", timeinfo);

	return buffer;
}

ofstream fileLog;
int openLogFile(string fileLogName) {
	fileLog.open(fileLogName, std::ofstream::app);
	if (!fileLog) {
		cout << "Unable to open log file: " << fileLogName << endl;
		return 1;
	}
	return 0;
}

void writeLog(string stringToWrite) {
	fileLog << "[" << getDateTime() << "]" << stringToWrite << endl;
}

AIGParser *aig;
int main() {
	cout << "AIG Data Structure Processor" << endl;

	//unsigned int levels;
	//string nodeTagOrder;
	//bool forward;
	//bool bestCase;
	bool flagAag;

	//levels = 8;
	//nodeTagOrder = 'b';
	//forward  = 1;
	//bestCase = 0;
	flagAag = 1;

	string logFileFullPath = "AIGProcessor.log";
	openLogFile(logFileFullPath);
	writeLog("Test file writing");

	string fileExtension;
	fileExtension = (flagAag) ? "aag" : "aig";

	string dataFileDirectory;
	dataFileDirectory = fileExtension + "s";

	string completePath;
	completePath.append("resources/");
	completePath.append(dataFileDirectory);
	completePath.append("/");
	completePath.append("C17");
	completePath.append(".");
	completePath.append(fileExtension);

	cout << "Reading file: " << completePath << endl;

	aig = new AIGParser();
	if (!aig->openAigFile(completePath))
		return 1;

	string textToLog = "";
	writeLog("*** Reading file: " + completePath);
	textToLog = "";

	//cout << aig->getLineAigFile();

	unsigned int returnReadHeader { 0 };
	returnReadHeader = aig->readHeader(fileExtension);
	if (returnReadHeader != 0)
		return 2;

	cout << aig->listHeader() << endl;

	aig->instanceArraysFanIn();

	unsigned int currentnumberPositionArray { 0 };
	currentnumberPositionArray =
			aig->populateStructureUsingAutoGeneratedConstant0(
					currentnumberPositionArray);
	//cout << currentnumberPositionArray << endl;
	unsigned int lineStartInput = 1;
	unsigned int lineEndInput = lineStartInput + (aig->getNumInputs()-1);
	//unsigned int lineStartOutput = lineStartInput + 1;
	//unsigned int lineEndOutput = lineEndInput + aig->getNumOutputs();
	unsigned int lineStartAnd = lineEndInput + 1;
	unsigned int lineEndAnd = lineStartAnd + (aig->getNumAnds()-1);

    cout << "Input->" << lineStartInput << "-" << lineEndInput << endl;
    cout << "Ands->" << lineStartAnd << "-" << lineEndAnd << endl;


	currentnumberPositionArray = aig->readInputs(currentnumberPositionArray,
			flagAag);

	//cout << currentnumberPositionArray << endl;

	cout << "List of Inputs:" << endl;
	cout << aig->listArraysFanIn(lineStartInput, lineEndInput);

	aig->closeAigFile();

	if (!aig->openAigFile(completePath))
		return 1;

	aig->getLineAigFile();

	for (unsigned int i = 0; i < aig->getNumInputs(); i++)
		aig->getLineAigFile();


	aig->readOutputs();

	cout << aig->listArrayOutputs();

	currentnumberPositionArray = aig->readAnds(currentnumberPositionArray);

	cout << "List of Ands:" << endl;
	//cout << lineStartAnd << "-" << lineEndAnd << endl;
	cout << aig->listArraysFanIn(lineStartAnd, lineEndAnd);

	aig->closeAigFile();

	cout << endl;

	fileLog.close();
	return 0;
}
